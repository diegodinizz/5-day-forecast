{"version":3,"sources":["api.js","components/Forecast.js","components/Weather.js","components/hooks/useFetch.js","components/GlobalStyle.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","Container","styled","div","DayContainer","span","ForecastIconContainer","MinMaxContainer","Forecast","date","forecastIcon","tempMax","tempMin","src","alt","Loading","CityContainer","DescriptionContainer","TemperatureContainer","WeatherIcon","img","SunriseSunsetContainer","FeelsLikeHumidityContainer","Weather","useState","currentWeather","setCurrentWeather","forecast","setForecast","loading","setLoading","handleResponse","response","ok","json","Error","statusText","toLowerCase","mapDataWeather","data","city","name","country","sys","dt","humidity","main","weather_icon","weather","icon","temperature","temp","description","temp_min","temp_max","sunset","sunrise","feels_like","mapDataForecast","useEffect","a","fetch","Object","entries","length","mappedData","getWeather","catch","error","console","log","message","i","list","push","getForecast","useFetch","convertToTime","timestamp","Date","getHours","getMinutes","substr","getDayOfWeek","getDay","currentTime","toLocaleTimeString","slice","Math","floor","map","items","key","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAEeA,EAFC,mC,2mBCGhB,IAAMC,EAAYC,IAAOC,IAAV,KAQTC,EAAeF,IAAOG,KAAV,KAIZC,EAAwBJ,IAAOC,IAAV,KASrBI,EAAkBL,IAAOC,IAAV,KAcRK,EAAW,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACtD,OACE,kBAACX,EAAD,KACE,kBAACG,EAAD,KAAeK,GACf,kBAACH,EAAD,KACE,yBACEO,IAAG,4CAAuCH,EAAvC,WACHI,IAAI,mBAGR,kBAACP,EAAD,KACE,8BAAOI,EAAP,QACA,8BAAOC,EAAP,W,u+CC3CR,IAAMX,EAAYC,IAAOC,IAAV,KAqBTY,EAAUb,IAAOC,IAAV,KAKPa,EAAgBd,IAAOC,IAAV,KAKbc,EAAuBf,IAAOC,IAAV,KAKpBe,EAAuBhB,IAAOC,IAAV,KAKpBgB,EAAcjB,IAAOkB,IAAV,KAKXb,EAAkBL,IAAOC,IAAV,KAQfkB,EAAyBnB,YAAOK,EAAPL,CAAH,KAEtBoB,EAA6BpB,YAAOK,EAAPL,CAAH,KAKnBqB,EAAU,WAAO,IAAD,EChEtB,WAAsB,IAAD,EACkBC,mBAAS,IAD3B,mBACnBC,EADmB,KACHC,EADG,OAEMF,mBAAS,IAFf,mBAEnBG,EAFmB,KAETC,EAFS,OAGIJ,oBAAS,GAHb,mBAGnBK,EAHmB,KAGVC,EAHU,KAK1B,SAASC,EAAgBC,GACvB,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,mBAAqBH,EAASI,WAAWC,eAI7D,SAASC,EAAgBC,GAgBvB,MAfe,CACbC,KAAMD,EAAKE,KACXC,QAASH,EAAKI,IAAID,QAClBjC,KAAM8B,EAAKK,GACXC,SAAUN,EAAKO,KAAKD,SACpBE,aAAcR,EAAKS,QAAQ,GAAGC,KAC9BC,YAAaX,EAAKO,KAAKK,KACvBC,YAAab,EAAKS,QAAQ,GAAGI,YAC7BC,SAAUd,EAAKO,KAAKO,SACpBC,SAAUf,EAAKO,KAAKQ,SACpBC,OAAQhB,EAAKI,IAAIY,OACjBC,QAASjB,EAAKI,IAAIa,QAClBC,WAAYlB,EAAKO,KAAKW,YAM1B,SAASC,EAAiBnB,GAQxB,MAPe,CACb9B,KAAM8B,EAAKK,GACXG,aAAcR,EAAKS,QAAQ,GAAGC,KAC9BI,SAAUd,EAAKO,KAAKO,SACpBC,SAAUf,EAAKO,KAAKQ,UA2CxB,OArCAK,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACyBC,MAAM,qFAAD,OAC2D7D,IAFzF,cACQgC,EADR,gBAIqBD,EAAeC,GAJpC,OAIQO,EAJR,OAMMuB,OAAOC,QAAQxB,GAAMyB,SACjBC,EAAa3B,EAAeC,GAClCb,EAAkBuC,GAClBnC,GAAW,IATf,4CADc,uBAAC,WAAD,gCAcdoC,GAAaC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,cAC7C,CAAC1C,IAEJ8B,qBAAU,WAAM,4CACd,kCAAAC,EAAA,sEACyBC,MAAM,sFAAD,OAC4D7D,IAF1F,cACQgC,EADR,gBAIqBD,EAAeC,GAJpC,OAME,GAFMO,EAJR,OAMMuB,OAAOC,QAAQxB,GAAMyB,OAAQ,CAE/B,IADMrC,EAAW,GACR6C,EAAI,EAAGA,EAAIjC,EAAKkC,KAAKT,OAAQQ,GAAK,EACzC7C,EAAS+C,KAAKhB,EAAgBnB,EAAKkC,KAAKD,EAAI,KAE9C5C,EAAYD,GACZG,GAAW,GAZf,4CADc,uBAAC,WAAD,gCAiBd6C,GAAcR,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,cAC9C,CAAC1C,IAEG,CAACJ,EAAgBE,EAAUE,GDfG+C,GADV,mBACpB5B,EADoB,KACXrB,EADW,KACDE,EADC,KAIzBW,EAYEQ,EAZFR,KACAE,EAWEM,EAXFN,QACAjC,EAUEuC,EAVFvC,KACAoC,EASEG,EATFH,SACAE,EAQEC,EARFD,aACAG,EAOEF,EAPFE,YACAE,EAMEJ,EANFI,YACAC,EAKEL,EALFK,SACAC,EAIEN,EAJFM,SACAC,EAGEP,EAHFO,OACAC,EAEER,EAFFQ,QACAC,EACET,EADFS,WAGF,SAASoB,EAAeC,GACtB,IAAMrE,EAAO,IAAIsE,KAAiB,IAAZD,GAGtB,OAFarE,EAAKuE,WAEJ,KADC,IAAMvE,EAAKwE,cACCC,QAAQ,GAGrC,SAASC,EAAcL,GAWrB,MAVa,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAEU,IAAIC,KAAiB,IAAZD,GACLM,UAGlB,IAAMC,GAAc,IAAIN,MAAOO,qBAAqBC,MAAM,EAAG,GAE7D,OACE,kBAAC,EAAD,KACG1D,EACC,kBAACd,EAAD,mBAEA,oCACE,kBAACC,EAAD,KACGwB,EADH,KACWE,GAEX,kBAACzB,EAAD,KACGkE,EAAa1E,GADhB,KACyB4E,EADzB,KACwCjC,GAExC,kBAAClC,EAAD,KACE,kBAACC,EAAD,CACEN,IAAG,4CAAuCkC,EAAvC,WACHjC,IAAI,iBAEL0E,KAAKC,MAAMvC,GALd,QAOA,kBAAC,EAAD,KACE,sCAAYsC,KAAKC,MAAMnC,GAAvB,QACA,sCAAYkC,KAAKC,MAAMpC,GAAvB,SAEF,kBAAChC,EAAD,KACE,0CAAgBwD,EAAcrB,IAC9B,yCAAeqB,EAActB,KAE/B,kBAACjC,EAAD,KACE,6CAAmBkE,KAAKC,MAAMhC,GAA9B,QACA,2CAAiBZ,EAAjB,MAEDlB,EAAS+D,KAAI,SAAAC,GAAK,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAMlF,KACXA,KAAM0E,EAAaQ,EAAMlF,MACzBC,aAAciF,EAAM5C,aACpBpC,QAAS6E,KAAKC,MAAME,EAAMrC,UAC1B1C,QAAS4E,KAAKC,MAAME,EAAMtC,kB,mcEhJjC,IAAMwC,EAAcC,YAAH,KCcTC,MAVf,WACE,OACE,6BACE,+CACA,kBAAC,EAAD,MACA,kBAACF,EAAD,QCCcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEd5C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMG,c","file":"static/js/main.be25ee8a.chunk.js","sourcesContent":["const API_KEY = 'a6437bf7ef8435da6240163dfdc4c346'\n\nexport default API_KEY","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  width: 90%;\n  height: 30px;\n  padding-top: 8px;\n  font-size: 18px;\n`\n\nconst DayContainer = styled.span`\n  width: 45%;\n`\n\nconst ForecastIconContainer = styled.div`\n  width: 33%;\n\n  img {\n    width: 30px;\n    height: 30px;\n  }\n`\n\nconst MinMaxContainer = styled.div`\n  width: 22%;\n  display: flex;\n  justify-content: space-between;\n\n  span {\n    font-weight: 600;\n\n    :last-child {\n      font-weight: 400;\n    }\n  }\n`\n\nexport const Forecast = ({ date, forecastIcon, tempMax, tempMin }) => {\n  return (\n    <Container>\n      <DayContainer>{date}</DayContainer>\n      <ForecastIconContainer>\n        <img\n          src={`https://openweathermap.org/img/wn/${forecastIcon}@2x.png`}\n          alt='forecast-icon'\n        />\n      </ForecastIconContainer>\n      <MinMaxContainer>\n        <span>{tempMax}&deg;</span>\n        <span>{tempMin}&deg;</span>\n      </MinMaxContainer>\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { useFetch } from '../components/hooks/useFetch'\n\nimport { Forecast } from './Forecast'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 21vw;\n  height: auto;\n  align-items: center;\n  margin: 0 auto;\n  padding: 2em 1em;\n  border: 1px solid #52575d;\n  border-radius: 5px;\n  background-color: rgba(18, 28, 31, 0.3);\n  color: whitesmoke;\n  -webkit-box-shadow: 5px 5px 5px 0px rgba(82, 87, 93, 0.5);\n  -moz-box-shadow: 5px 5px 5px 0px rgba(82, 87, 93, 0.5);\n  box-shadow: 5px 5px 5px 0px rgba(82, 87, 93, 0.5);\n\n  @media (max-width: 800px) {\n    width: 90%;\n  }\n`\n\nconst Loading = styled.div`\n  font-size: 1.5em;\n  font-weight: 600;\n`\n\nconst CityContainer = styled.div`\n  font-size: 2em;\n  font-weight: 600;\n`\n\nconst DescriptionContainer = styled.div`\n  font-size: 1.2em;\n  margin-bottom: 20px;\n`\n\nconst TemperatureContainer = styled.div`\n  font-size: 5.5em;\n  margin-bottom: 25px;\n`\n\nconst WeatherIcon = styled.img`\n  width: 70px;\n  height: 70px;\n`\n\nconst MinMaxContainer = styled.div`\n  width: 90%;\n  display: flex;\n  justify-content: space-between;\n  font-size: 18px;\n  padding-bottom: 10px;\n`\n\nconst SunriseSunsetContainer = styled(MinMaxContainer)``\n\nconst FeelsLikeHumidityContainer = styled(MinMaxContainer)`\n  border-bottom: 1px solid whitesmoke;\n  padding-bottom: 15px;\n`\n\nexport const Weather = () => {\n  const [weather, forecast, loading] = useFetch()\n\n  const {\n    city,\n    country,\n    date,\n    humidity,\n    weather_icon,\n    temperature,\n    description,\n    temp_min,\n    temp_max,\n    sunset,\n    sunrise,\n    feels_like\n  } = weather\n\n  function convertToTime (timestamp) {\n    const date = new Date(timestamp * 1000)\n    const hour = date.getHours()\n    const minute = '0' + date.getMinutes()\n    return hour + ':' + minute.substr(-2)\n  }\n\n  function getDayOfWeek (timestamp) {\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday'\n    ]\n    const day = new Date(timestamp * 1000)\n    return days[day.getDay()]\n  }\n\n  const currentTime = new Date().toLocaleTimeString().slice(0, 5)\n\n  return (\n    <Container>\n      {loading ? (\n        <Loading>Loading...</Loading>\n      ) : (\n        <>\n          <CityContainer>\n            {city}, {country}\n          </CityContainer>\n          <DescriptionContainer>\n            {getDayOfWeek(date)}, {currentTime}, {description}\n          </DescriptionContainer>\n          <TemperatureContainer>\n            <WeatherIcon\n              src={`https://openweathermap.org/img/wn/${weather_icon}@2x.png`}\n              alt='weather-icon'\n            />\n            {Math.floor(temperature)}&deg;\n          </TemperatureContainer>\n          <MinMaxContainer>\n            <span>Max: {Math.floor(temp_max)}&deg;</span>\n            <span>Min: {Math.floor(temp_min)}&deg;</span>\n          </MinMaxContainer>\n          <SunriseSunsetContainer>\n            <span>Sunrise: {convertToTime(sunrise)}</span>\n            <span>Sunset: {convertToTime(sunset)}</span>\n          </SunriseSunsetContainer>\n          <FeelsLikeHumidityContainer>\n            <span>Feels Like: {Math.floor(feels_like)}&deg;</span>\n            <span>Humidity: {humidity}%</span>\n          </FeelsLikeHumidityContainer>\n          {forecast.map(items => (\n            <Forecast\n              key={items.date}\n              date={getDayOfWeek(items.date)}\n              forecastIcon={items.weather_icon}\n              tempMax={Math.floor(items.temp_max)}\n              tempMin={Math.floor(items.temp_min)}\n            />\n          ))}\n        </>\n      )}\n    </Container>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nimport API_KEY from '../../api'\n\nexport function useFetch () {\n  const [currentWeather, setCurrentWeather] = useState({})\n  const [forecast, setForecast] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  function handleResponse (response) {\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw new Error('Error: Location ' + response.statusText.toLowerCase())\n    }\n  }\n\n  function mapDataWeather (data) {\n    const mapped = {\n      city: data.name,\n      country: data.sys.country,\n      date: data.dt,\n      humidity: data.main.humidity,\n      weather_icon: data.weather[0].icon,\n      temperature: data.main.temp,\n      description: data.weather[0].description,\n      temp_min: data.main.temp_min,\n      temp_max: data.main.temp_max,\n      sunset: data.sys.sunset,\n      sunrise: data.sys.sunrise,\n      feels_like: data.main.feels_like\n    }\n\n    return mapped\n  }\n\n  function mapDataForecast (data) {\n    const mapped = {\n      date: data.dt,\n      weather_icon: data.weather[0].icon,\n      temp_min: data.main.temp_min,\n      temp_max: data.main.temp_max,\n    }\n\n    return mapped\n  }\n\n  useEffect(() => {\n    async function getWeather () {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=Edinburgh,uk&units=metric&APPID=${API_KEY}`\n      )\n      const data = await handleResponse(response)\n\n      if (Object.entries(data).length) {\n        const mappedData = mapDataWeather(data)\n        setCurrentWeather(mappedData)\n        setLoading(false)\n      }\n    }\n\n    getWeather().catch(error => console.log(error.message))\n  }, [loading])\n\n  useEffect(() => {\n    async function getForecast () {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=Edinburgh,uk&units=metric&APPID=${API_KEY}`\n      )\n      const data = await handleResponse(response)\n\n      if (Object.entries(data).length) {\n        const forecast = []\n        for (let i = 0; i < data.list.length; i += 8) {\n          forecast.push(mapDataForecast(data.list[i + 4]));\n        }\n        setForecast(forecast)\n        setLoading(false)\n      }\n    }\n\n    getForecast().catch(error => console.log(error.message))\n  }, [loading])\n\n  return [currentWeather, forecast, loading]\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\nbody {\n  font-family: 'Open Sans Condensed';\n  letter-spacing: 1px;\n  background: -webkit-gradient(linear, 77% 18%, 10% 21%, from(#b9d7ea), to(#769fcd));\n\n  @media(max-width: 800px) {\n    padding: 30px;\n  }\n}\n\nh1 {\n  text-align: center;\n  margin: 60px 0px 30px 0px;\n  font-size: 40px;\n  color: #41444b;\n\n  @media(max-width: 800px) {\n    margin-top: 0px;\n  }\n}\n`\n","import React from 'react'\n\nimport { Weather } from './components/Weather'\n\nimport { GlobalStyle } from './components/GlobalStyle'\n\nfunction App () {\n  return (\n    <div>\n      <h1>The Weather App</h1>\n      <Weather />\n      <GlobalStyle />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}