{"version":3,"sources":["components/Weather.js","components/hooks/useFetch.js","components/GlobalStyle.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","CityContainer","DescriptionContainer","TemperatureContainer","DetailsContainer","MinMaxContainer","Weather","name","country","temp","description","tempMin","tempMax","sunset","sunrise","feelsLike","humidity","weatherIcon","src","alt","apiKey","GlobalStyle","createGlobalStyle","App","useState","setName","setCountry","tempDescription","setTempDescription","setTemp","setTempMin","setTempMax","setSunset","setSunrise","setFeelsLike","setHumidity","setWeatherIcon","useEffect","a","fetch","response","json","data","sys","weather","main","temp_min","temp_max","feels_like","icon","fetchUrl","useFetch","convertToTime","timestamp","date","Date","getHours","getMinutes","substr","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25f5531a.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 20vw;\n  height: 29em;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  border: 1px solid #52575d;\n  border-radius: 5px;\n  background-color: rgba(18, 28, 31, 0.3);\n  color: whitesmoke;\n  -webkit-box-shadow: 5px 5px 5px 0px rgba(82, 87, 93, 0.5);\n  -moz-box-shadow: 5px 5px 5px 0px rgba(82, 87, 93, 0.5);\n  box-shadow: 5px 5px 5px 0px rgba(82, 87, 93, 0.5);\n\n  @media (max-width: 800px) {\n    width: 100%;\n  }\n\n  img {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst CityContainer = styled.div`\n  font-size: 2em;\n  font-weight: 600;\n`\n\nconst DescriptionContainer = styled.div`\n  font-size: 1.3em;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-right: 20px;\n`\n\nconst TemperatureContainer = styled.div`\n  font-size: 6.5em;\n  margin: 10px 0px 20px 20px;\n`\n\nconst DetailsContainer = styled.div`\n  width: 80%;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  font-size: 1em;\n\n  span {\n    margin-top: 10px;\n    font-weight: 600;\n\n    :last-child {\n      justify-self: end;\n    }\n  }\n`\n\nconst MinMaxContainer = styled(DetailsContainer)`\n  border-bottom: 1px solid whitesmoke;\n\n  span {\n    margin-bottom: 15px;\n    font-weight: 500;\n  }\n`\n\nexport const Weather = ({\n  name,\n  country,\n  temp,\n  description,\n  tempMin,\n  tempMax,\n  sunset,\n  sunrise,\n  feelsLike,\n  humidity,\n  weatherIcon\n}) => {\n  return (\n    <Container>\n      <CityContainer>\n        {name}, {country}\n      </CityContainer>\n      <DescriptionContainer>\n        <img\n          src={`https://openweathermap.org/img/wn/${weatherIcon}@2x.png`}\n          alt='weather-icon'\n        />\n        {description}\n      </DescriptionContainer>\n      <TemperatureContainer>{temp}&deg;</TemperatureContainer>\n      <MinMaxContainer>\n        <span>Min: {tempMin}&deg;</span>\n        <span>Max: {tempMax}&deg;</span>\n      </MinMaxContainer>\n      <DetailsContainer>\n        <span>Sunrise: {sunrise}</span>\n        <span>Sunset: {sunset}</span>\n      </DetailsContainer>\n      <DetailsContainer>\n        <span>Feels Like: {feelsLike}&deg;</span>\n        <span>Humidity: {humidity}%</span>\n      </DetailsContainer>\n    </Container>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nconst apiKey = 'a6437bf7ef8435da6240163dfdc4c346'\n\nexport function useFetch () {\n  const [name, setName] = useState('')\n  const [country, setCountry] = useState('')\n  const [tempDescription, setTempDescription] = useState('')\n  const [temp, setTemp] = useState('')\n  const [tempMin, setTempMin] = useState('')\n  const [tempMax, setTempMax] = useState('')\n  const [sunset, setSunset] = useState('')\n  const [sunrise, setSunrise] = useState('')\n  const [feelsLike, setFeelsLike] = useState('')\n  const [humidity, setHumidity] = useState('')\n  const [weatherIcon, setWeatherIcon] = useState('')\n\n  useEffect(() => {\n    async function fetchUrl () {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=Edinburgh,uk&units=metric&APPID=${apiKey}`\n      )\n      const data = await response.json()\n\n      setName(data.name)\n      setCountry(data.sys.country)\n      setTempDescription(data.weather[0].description)\n      setTemp(data.main.temp)\n      setTempMin(data.main.temp_min)\n      setTempMax(data.main.temp_max)\n      setSunset(data.sys.sunset)\n      setSunrise(data.sys.sunrise)\n      setFeelsLike(data.main.feels_like)\n      setHumidity(data.main.humidity)\n      setWeatherIcon(data.weather[0].icon)\n    }\n\n    fetchUrl()\n  }, [])\n\n  return [\n    name,\n    country,\n    tempDescription,\n    temp,\n    tempMin,\n    tempMax,\n    sunset,\n    sunrise,\n    feelsLike,\n    humidity,\n    weatherIcon\n  ]\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\nbody {\n  font-family: 'Open Sans Condensed';\n  letter-spacing: 1px;\n  /* padding: 20px 60px; */\n  background: -webkit-gradient(linear, 77% 18%, 10% 21%, from(#b9d7ea), to(#769fcd));\n\n  @media(max-width: 800px) {\n    padding: 30px;\n  }\n}\n\nh1 {\n  text-align: center;\n  margin: 60px 0px 30px 0px;\n  font-size: 40px;\n  color: #41444b;\n\n  @media(max-width: 800px) {\n    margin-top: 0px;\n  }\n}\n`\n","import React from 'react'\n\nimport { Weather } from './components/Weather'\nimport { useFetch } from './components/hooks/useFetch'\n\nimport { GlobalStyle } from './components/GlobalStyle'\n\nfunction App () {\n  const [\n    name,\n    country,\n    tempDescription,\n    temp,\n    tempMin,\n    tempMax,\n    sunset,\n    sunrise,\n    feelsLike,\n    humidity,\n    weatherIcon\n  ] = useFetch()\n\n  function convertToTime (timestamp) {\n    const date = new Date(timestamp * 1000)\n    const hour = date.getHours()\n    const minute = '0' + date.getMinutes()\n    return hour + ':' + minute.substr(-2)\n  }\n\n  return (\n    <div>\n      <h1>The Weather App</h1>\n      <Weather\n        name={name}\n        country={country}\n        temp={Math.floor(temp)}\n        description={tempDescription}\n        tempMin={Math.floor(tempMin)}\n        tempMax={Math.floor(tempMax)}\n        sunset={convertToTime(sunset)}\n        sunrise={convertToTime(sunrise)}\n        feelsLike={Math.floor(feelsLike)}\n        humidity={humidity}\n        weatherIcon={weatherIcon}\n      />\n      <GlobalStyle />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}